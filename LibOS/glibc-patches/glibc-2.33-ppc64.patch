---
 sysdeps/powerpc/nptl/tls.h                                  |   14 ++++
 sysdeps/powerpc/powerpc64/sysdep.h                          |   32 ++++++----
 sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S |    2 
 sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S           |   38 ++++++++++++
 sysdeps/unix/sysv/linux/powerpc/syscall.S                   |   26 ++++++++
 sysdeps/unix/sysv/linux/powerpc/sysdep.h                    |   30 ++++++++-
 6 files changed, 124 insertions(+), 18 deletions(-)

Index: glibc-2.33/sysdeps/unix/sysv/linux/powerpc/syscall.S
===================================================================
--- glibc-2.33.orig/sysdeps/unix/sysv/linux/powerpc/syscall.S
+++ glibc-2.33/sysdeps/unix/sysv/linux/powerpc/syscall.S
@@ -18,6 +18,10 @@
 #include <sysdep.h>
 
 ENTRY (syscall)
+	mflr r0
+	std  r0,16(r1)
+	stdu r1,-32(r1)
+
 	mr   r0,r3
 	mr   r3,r4
 	mr   r4,r5
@@ -25,6 +29,27 @@ ENTRY (syscall)
 	mr   r6,r7
 	mr   r7,r8
 	mr   r8,r9
+
+
+	mr   r9,r0
+
+	// call syscalldb using tcbhead_t->LibOS_TCB, which gives us
+	// PAL_TCB*
+	std   r2,24(r1)
+	subi  r12,r13,0x7000 + TCBHEAD_LIBOS_PTR_FROM_END_OFFSET
+	// pointer to PAL_TCB with tcbhead_t
+	ld   r12,0(r12)
+	// our special offset in PAL_TCB containing syscalldb address
+	ld   r12,SHIM_SYSCALLDB_OFFSET(r12)
+	// function address must be in r12
+	mtctr r12
+	bctrl
+	ld   r2,24(r1)
+
+	addi r1,r1,32
+	ld   r0,16(r1)
+	mtlr r0
+#if 0
 #if !IS_IN(rtld) && (defined(__PPC64__) || defined(__powerpc64__))
 	CHECK_SCV_SUPPORT r9 0f
 	DO_CALL_SCV
@@ -32,6 +57,7 @@ ENTRY (syscall)
 	b 1f
 #endif
 0:	DO_CALL_SC
+#endif
 	RET_SC
 1:	TAIL_CALL_SYSCALL_ERROR
 PSEUDO_END (syscall)
Index: glibc-2.33/sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S
===================================================================
--- glibc-2.33.orig/sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S
+++ glibc-2.33/sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S
@@ -43,7 +43,7 @@
 	li	r3,0;					\
 	addi	r4,r1,FRAME_MIN_SIZE;			\
 	li	r0,__NR_sigaltstack;			\
-	sc;						\
+	SYSCALLDB_R9(128)				\
 	/* Without working sigaltstack we cannot perform the test.  */ \
 	bso	.Lok2;					\
 	lwz	r0,FRAME_MIN_SIZE+8(r1);		\
Index: glibc-2.33/sysdeps/powerpc/nptl/tls.h
===================================================================
--- glibc-2.33.orig/sysdeps/powerpc/nptl/tls.h
+++ glibc-2.33/sysdeps/powerpc/nptl/tls.h
@@ -71,6 +71,8 @@ register void *__thread_register __asm__
    are private.  */
 typedef struct
 {
+  /* LibOS needs its own TCB */
+  void *LibOS_TCB;
   /* Reservation for HWCAP data.  To be accessed by GCC in
      __builtin_cpu_supports(), so it is a part of public ABI.  */
   uint64_t hwcap;
@@ -146,9 +148,14 @@ typedef struct
    operation can cause a failure 'errno' must not be touched.  */
 # define TLS_INIT_TP(tcbp) \
   ({ 									      \
+    void *libostcb = NULL;						      \
+    if (__thread_register) {						      \
+      libostcb = THREAD_GET_LIBOS_TCB();				      \
+    }									      \
     __thread_register = (void *) (tcbp) + TLS_TCB_OFFSET;		      \
     THREAD_SET_HWCAP (__tcb_hwcap);					      \
     THREAD_SET_AT_PLATFORM (__tcb_platform);				      \
+    THREAD_SET_LIBOS_TCB (libostcb);					      \
     NULL;								      \
   })
 
@@ -226,6 +233,13 @@ typedef struct
 # define THREAD_SET_AT_PLATFORM(value) \
     (THREAD_GET_AT_PLATFORM () = (value))
 
+/* LibOS_TCN field in TCB head.  */
+# define THREAD_GET_LIBOS_TCB() \
+    (((tcbhead_t *) ((char *) __thread_register				      \
+		     - TLS_TCB_OFFSET))[-1].LibOS_TCB)
+# define THREAD_SET_LIBOS_TCB(value) \
+    (THREAD_GET_LIBOS_TCB () = (value))
+
 /* l_tls_offset == 0 is perfectly valid on PPC, so we have to use some
    different value to mean unset l_tls_offset.  */
 # define NO_TLS_OFFSET		-1
Index: glibc-2.33/sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S
===================================================================
--- glibc-2.33.orig/sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S
+++ glibc-2.33/sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S
@@ -28,6 +28,10 @@
                   int flags [r5], void *arg [r6], void *parent_tid [r7],
                   void *tls [r8], void *child_tid [r9]); */
 
+#define CLONE_STACKROOM  (/* red zone */32 + FRAME_MIN_SIZE)
+#define CLONE_VM      0x00000100
+#define CLONE_VFORK   0x00004000
+
 ENTRY (__clone)
 	CALL_MCOUNT 7
 
@@ -52,6 +56,33 @@ ENTRY (__clone)
 	li	r0,0
 	stdu	r0,-FRAME_MIN_SIZE_PARM(r4)
 
+	/* For Graphene we pass the function address and parameter via the
+	 * stack since a child *thread* will not come back up here.
+	 * Graphene will launch the thread using these parameters.
+	 * We will come back up as a *child process* (fork!), though.
+	 */
+	std	r3,FRAME_LR_SAVE(r4)   /* function to call */
+	std	r6,FRAME_PARM_SAVE(r4) /* parameter to function */
+	/* When certain fork-related CLONE flags are set the child process
+	 * will come back up here after the call to syscalldb. For this to
+	 * work we need to prepare the child's stack a bit.
+	 */
+	andi.   r30,r5,CLONE_VM
+	beq	L(do_stack_setup)      /* CLONE_VM is not set, do it */
+	andi.	r30,r5,CLONE_VFORK
+	beq	L(skip_stack_setup)
+
+L(do_stack_setup):
+	/* Compensate for what DO_CALL_STACKROOM does to r1 now and will do
+	 * to r1 when it returns (unwind); r4 is the stack the child process
+	 * will have when it returns and it will unwind then as 'r1'. So we
+	 * have to prepare the stack for this using r4 now.
+	 */
+	subi	r4,r4,CLONE_STACKROOM
+	std	r2,FRAME_TOC_SAVE(r4)
+
+L(skip_stack_setup):
+
 	/* Save fn, args, stack across syscall.  */
 	mr	r30,r3			/* Function in r30.  */
 	mr	r29,r5			/* Flags in r29.  */
@@ -70,6 +101,7 @@ ENTRY (__clone)
 	cfi_endproc
 
 	/* Do the call.  */
+#if 0
 	li 	r0,SYS_ify(clone)
 	CHECK_SCV_SUPPORT r28 0f
 	/* This is equivalent to DO_CALL_SCV, but we cannot use the macro here
@@ -88,6 +120,8 @@ ENTRY (__clone)
 	cmpdi	cr1,r3,0
 	b 1f
 0:      DO_CALL_SC
+#endif
+0:      DO_CALL_STACKROOM(SYS_ify(clone), CLONE_STACKROOM)
 
 	/* Check for child process.  */
 	/* With sc, error is indicated by cr0.SO.  */
@@ -115,8 +149,10 @@ L(badargs):
 	TAIL_CALL_SYSCALL_ERROR
 
 L(parent):
+#if 0
 	/* Check if scv is available. */
 	cmpdi cr1,r28,0
+#endif
 
 	/* Parent.  Restore registers & return.  */
 	cfi_offset(r28,-32)
@@ -132,9 +168,11 @@ L(parent):
 	cfi_restore(r30)
 	cfi_restore(r31)
 
+#if 0
 	beq cr1,0f
 	RET_SCV
 	b 1f
+#endif
 0:	RET_SC
 1:	TAIL_CALL_SYSCALL_ERROR
 
Index: glibc-2.33/sysdeps/unix/sysv/linux/powerpc/sysdep.h
===================================================================
--- glibc-2.33.orig/sysdeps/unix/sysv/linux/powerpc/sysdep.h
+++ glibc-2.33/sysdeps/unix/sysv/linux/powerpc/sysdep.h
@@ -22,6 +22,8 @@
 #include <sysdeps/unix/sysv/linux/sysdep.h>
 #include <sysdeps/unix/powerpc/sysdep.h>
 #include <tls.h>
+#include <shim_entry_api.h>
+
 /* Define __set_errno() for INLINE_SYSCALL macro below.  */
 #include <errno.h>
 
@@ -90,6 +92,7 @@
     r3;					\
   })
 
+#if 0
 #define SYSCALL_SC(nr)				\
   ({						\
     __asm__ __volatile__			\
@@ -104,6 +107,7 @@
 	 "cr0", "ctr", "memory");		\
     r0 & (1 << 28) ? -r3 : r3;			\
   })
+#endif
 
 /* This will only be non-empty for 64-bit systems, see below.  */
 #define TRY_SYSCALL_SCV(nr)
@@ -135,10 +139,28 @@
 
 # define INTERNAL_SYSCALL_NCS(name, nr, args...)	\
   ({							\
-    DECLARE_REGS;					\
-    LOADARGS_##nr (name, ##args);			\
-    TRY_SYSCALL_SCV(nr)					\
-    SYSCALL_SC(nr);					\
+    register long int r0;				\
+    register long int r3 = 0;				\
+    register long int r4 = 0;				\
+    register long int r5 = 0;				\
+    register long int r6 = 0;				\
+    register long int r7 = 0;				\
+    register long int r8 = 0;				\
+    typedef unsigned long (*syscalldb_func)(unsigned long, unsigned long,	\
+		 	    unsigned long, unsigned long, unsigned long,	\
+                            unsigned long, unsigned long);			\
+    syscalldb_func syscalldb;							\
+    LOADARGS_##nr (name, ##args);						\
+    __asm__ __volatile__("subi %0,13,%1\n\t"					\
+                         "ld %0,0(%0)\n\t"					\
+                         "ld %0,%2(%0)\n\t"					\
+                         : "=&r" (syscalldb)					\
+                         : "i" (0x7000 + TCBHEAD_LIBOS_PTR_FROM_END_OFFSET),	\
+                           "i" (SHIM_SYSCALLDB_OFFSET)				\
+                         :);							\
+    r3 = syscalldb(r3, r4, r5, r6, r7, r8, r0);					\
+    __asm__ __volatile__("mfcr %0\n\t" : "=&r" (r0) ::);			\
+    r0 & (1 << 28) ? -r3 : r3;							\
   })
 
 #undef INTERNAL_SYSCALL
Index: glibc-2.33/sysdeps/powerpc/powerpc64/sysdep.h
===================================================================
--- glibc-2.33.orig/sysdeps/powerpc/powerpc64/sysdep.h
+++ glibc-2.33/sysdeps/powerpc/powerpc64/sysdep.h
@@ -317,18 +317,23 @@ LT_LABELSUFFIX(name,_name_end): ; \
    to save its content beforehand.  */
 # define DO_CALL(syscall) \
     li r0,syscall; \
-    NVOLREG_SAVE; \
-    CHECK_SCV_SUPPORT r31 0f; \
-    DO_CALL_SCV; \
-    b 1f; \
-0:  DO_CALL_SC; \
+    /*NVOLREG_SAVE;*/ \
+    /*CHECK_SCV_SUPPORT r31 0f;*/ \
+    /*DO_CALL_SCV;*/ \
+    /*b 1f;*/ \
+0:  DO_CALL_SC \
 1:
 #endif /* IS_IN(rtld) */
 
+#define DO_CALL_STACKROOM(syscall, STACKROOM) \
+    li 0,syscall; \
+    SYSCALLDB_R9(STACKROOM)
+
 /* DO_CALL_SC and DO_CALL_SCV expect the syscall number to be in r0.  */
 #define DO_CALL_SC \
-    sc
+    SYSCALLDB_R9(256)
 
+#if 0
 #define DO_CALL_SCV \
     mflr r9; \
     std r9,FRAME_LR_SAVE(r1); \
@@ -340,6 +345,7 @@ LT_LABELSUFFIX(name,_name_end): ; \
     ld r9,FRAME_LR_SAVE(r1); \
     mtlr r9; \
     cfi_restore(lr);
+#endif
 
 /* ppc64 is always PIC */
 #undef JUMPTARGET
@@ -388,11 +394,11 @@ LT_LABELSUFFIX(name,_name_end): ; \
    set, we know we have entered the kernel using scv, so handle the return code
    accordingly.  */
 # define PSEUDO_RET \
-    cmpdi cr5,r31,0; \
-    NVOLREG_RESTORE; \
-    beq cr5,0f; \
-    RET_SCV; \
-    b 1f; \
+    /*cmpdi cr5,r31,0;*/ \
+    /*NVOLREG_RESTORE;*/ \
+    /*beq cr5,0f;*/ \
+    /*RET_SCV;*/ \
+    /*b 1f;*/ \
 0:  RET_SC; \
 1:  TAIL_CALL_SYSCALL_ERROR
 #endif
@@ -422,7 +428,7 @@ LT_LABELSUFFIX(name,_name_end): ; \
 #else
 /* This should only be called after a DO_CALL.  */
 # define PSEUDO_RET_NOERRNO \
-    NVOLREG_RESTORE; \
+    /*NVOLREG_RESTORE;*/ \
     blr
 #endif /* IS_IN(rtld) */
 
@@ -443,7 +449,7 @@ LT_LABELSUFFIX(name,_name_end): ; \
 #else
 /* This should only be called after a DO_CALL.  */
 # define PSEUDO_RET_ERRVAL \
-    NVOLREG_RESTORE; \
+    /*NVOLREG_RESTORE;*/ \
     blr
 #endif /* IS_IN(rtld) */
 
