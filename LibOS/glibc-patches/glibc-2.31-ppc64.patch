---
 sysdeps/powerpc/nptl/tls.h                                  |   17 ++++++
 sysdeps/powerpc/powerpc64/sysdep.h                          |    6 +-
 sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S |    2 
 sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S           |   14 ++++
 sysdeps/unix/sysv/linux/powerpc/powerpc64/sysdep.h          |   34 +++++-------
 sysdeps/unix/sysv/linux/powerpc/syscall.S                   |   14 ++++
 6 files changed, 64 insertions(+), 23 deletions(-)

Index: glibc-2.31/sysdeps/unix/sysv/linux/powerpc/powerpc64/sysdep.h
===================================================================
--- glibc-2.31.orig/sysdeps/unix/sysv/linux/powerpc/powerpc64/sysdep.h
+++ glibc-2.31/sysdeps/unix/sysv/linux/powerpc/powerpc64/sysdep.h
@@ -24,6 +24,7 @@
 #include <sysdeps/unix/sysv/linux/sysdep.h>
 #include <sysdeps/unix/powerpc/sysdep.h>
 #include <tls.h>
+#include <syscalldb.h>
 
 /* Define __set_errno() for INLINE_SYSCALL macro below.  */
 #ifndef __ASSEMBLER__
@@ -102,26 +103,21 @@
 #undef INTERNAL_SYSCALL
 #define INTERNAL_SYSCALL_NCS(name, err, nr, args...) \
   ({									\
-    register long int r0  __asm__ ("r0");				\
-    register long int r3  __asm__ ("r3");				\
-    register long int r4  __asm__ ("r4");				\
-    register long int r5  __asm__ ("r5");				\
-    register long int r6  __asm__ ("r6");				\
-    register long int r7  __asm__ ("r7");				\
-    register long int r8  __asm__ ("r8");				\
+    register long int r0;						\
+    register long int r3 = 0;						\
+    register long int r4 = 0;						\
+    register long int r5 = 0;						\
+    register long int r6 = 0;						\
+    register long int r7 = 0;						\
+    register long int r8 = 0;						\
+    unsigned long syscalldb(unsigned long, unsigned long, unsigned long,\
+		 	    unsigned long, unsigned long, unsigned long,\
+                            unsigned long);				\
     LOADARGS_##nr (name, ##args);					\
-    __asm__ __volatile__						\
-      ("sc\n\t"								\
-       "mfcr  %0\n\t"							\
-       "0:"								\
-       : "=&r" (r0),							\
-         "=&r" (r3), "=&r" (r4), "=&r" (r5),				\
-         "=&r" (r6), "=&r" (r7), "=&r" (r8)				\
-       : ASM_INPUT_##nr							\
-       : "r9", "r10", "r11", "r12",					\
-         "cr0", "ctr", "memory");					\
-	  err = r0;  \
-    r3;  \
+    r3 = syscalldb(r3, r4, r5, r6, r7, r8, r0);				\
+    __asm__ __volatile__("mfcr %0\n\t" : "=&r" (r0) ::);		\
+    err = r0;								\
+    r3;									\
   })
 #define INTERNAL_SYSCALL(name, err, nr, args...)			\
   INTERNAL_SYSCALL_NCS (__NR_##name, err, nr, args)
Index: glibc-2.31/sysdeps/unix/sysv/linux/powerpc/syscall.S
===================================================================
--- glibc-2.31.orig/sysdeps/unix/sysv/linux/powerpc/syscall.S
+++ glibc-2.31/sysdeps/unix/sysv/linux/powerpc/syscall.S
@@ -18,6 +18,10 @@
 #include <sysdep.h>
 
 ENTRY (syscall)
+	mflr r0
+	std  r0,16(r1)
+	stdu r1,-32(r1)
+
 	mr   r0,r3
 	mr   r3,r4
 	mr   r4,r5
@@ -25,6 +29,14 @@ ENTRY (syscall)
 	mr   r6,r7
 	mr   r7,r8
 	mr   r8,r9
-	sc
+
+	mr   r9,r0
+
+	bl   syscalldb
+	nop
+
+	addi r1,r1,32
+	ld   r0,16(r1)
+	mtlr r0
 	PSEUDO_RET
 PSEUDO_END (syscall)
Index: glibc-2.31/sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S
===================================================================
--- glibc-2.31.orig/sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S
+++ glibc-2.31/sysdeps/unix/sysv/linux/powerpc/powerpc64/____longjmp_chk.S
@@ -43,7 +43,7 @@
 	li	r3,0;					\
 	addi	r4,r1,FRAME_MIN_SIZE;			\
 	li	r0,__NR_sigaltstack;			\
-	sc;						\
+	SYSCALLDB_R9(128)				\
 	/* Without working sigaltstack we cannot perform the test.  */ \
 	bso	.Lok2;					\
 	lwz	r0,FRAME_MIN_SIZE+8(r1);		\
Index: glibc-2.31/sysdeps/powerpc/powerpc64/sysdep.h
===================================================================
--- glibc-2.31.orig/sysdeps/powerpc/powerpc64/sysdep.h
+++ glibc-2.31/sysdeps/powerpc/powerpc64/sysdep.h
@@ -265,7 +265,11 @@ LT_LABELSUFFIX(name,_name_end): ; \
 
 #define DO_CALL(syscall) \
     li 0,syscall; \
-    sc
+    SYSCALLDB_R9(256)
+
+#define DO_CALL_STACKROOM(syscall, STACKROOM) \
+    li 0,syscall; \
+    SYSCALLDB_R9(STACKROOM)
 
 /* ppc64 is always PIC */
 #undef JUMPTARGET
Index: glibc-2.31/sysdeps/powerpc/nptl/tls.h
===================================================================
--- glibc-2.31.orig/sysdeps/powerpc/nptl/tls.h
+++ glibc-2.31/sysdeps/powerpc/nptl/tls.h
@@ -55,6 +55,8 @@
    are private.  */
 typedef struct
 {
+  /* LibOS needs its own TCB */
+  void *LibOS_TCB;
   /* Reservation for HWCAP data.  To be accessed by GCC in
      __builtin_cpu_supports(), so it is a part of public ABI.  */
   uint64_t hwcap;
@@ -140,9 +142,17 @@ register void *__thread_register __asm__
    operation can cause a failure 'errno' must not be touched.  */
 # define TLS_INIT_TP(tcbp) \
   ({ 									      \
+    /*_dl_printf("r13: 0x%lx\n", (unsigned long)__thread_register);*/	      \
+    void *libostcb = NULL;						      \
+    if (__thread_register) {						      \
+      libostcb = THREAD_GET_LIBOS_TCB();				      \
+      /*_dl_printf("LibOS TCB at 0x%lx\n", (unsigned long)THREAD_GET_LIBOS_TCB());*/\
+    }									      \
     __thread_register = (void *) (tcbp) + TLS_TCB_OFFSET;		      \
     THREAD_SET_HWCAP (__tcb_hwcap);					      \
     THREAD_SET_AT_PLATFORM (__tcb_platform);				      \
+    THREAD_SET_LIBOS_TCB (libostcb);					      \
+    /*_dl_printf("CHECK LibOS TCB IN NEW STRUCT at 0x%lx\n", (unsigned long)THREAD_GET_LIBOS_TCB());*/\
     NULL;								      \
   })
 
@@ -220,6 +230,13 @@ register void *__thread_register __asm__
 # define THREAD_SET_AT_PLATFORM(value) \
     (THREAD_GET_AT_PLATFORM () = (value))
 
+/* LibOS_TCN filed in TCB head.  */
+# define THREAD_GET_LIBOS_TCB() \
+    (((tcbhead_t *) ((char *) __thread_register				      \
+		     - TLS_TCB_OFFSET))[-1].LibOS_TCB)
+# define THREAD_SET_LIBOS_TCB(value) \
+    (THREAD_GET_LIBOS_TCB () = (value))
+
 /* l_tls_offset == 0 is perfectly valid on PPC, so we have to use some
    different value to mean unset l_tls_offset.  */
 # define NO_TLS_OFFSET		-1
Index: glibc-2.31/sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S
===================================================================
--- glibc-2.31.orig/sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S
+++ glibc-2.31/sysdeps/unix/sysv/linux/powerpc/powerpc64/clone.S
@@ -28,6 +28,9 @@
                   int flags [r5], void *arg [r6], void *parent_tid [r7],
                   void *tls [r8], void *child_tid [r9]); */
 
+#define CLONE_STACKROOM  256
+#define CLONE_VFORK   0x00004000
+
 ENTRY (__clone)
 	CALL_MCOUNT 7
 
@@ -50,6 +53,26 @@ ENTRY (__clone)
 	li	r0,0
 	stdu	r0,-FRAME_MIN_SIZE_PARM(r4)
 
+	/* For Graphene we pass the function address and parameter via the
+	 * stack since a child thread will not come back up here.
+         * Graphene will launch the thread using these parameters.
+         * We will come back up after a fork, though.
+	 */
+	std	r3,FRAME_LR_SAVE(r4)
+	std	r6,FRAME_PARM_SAVE(r4)
+	/* When certain flags are set the child will come back up here
+	 * after the call to syscalldb. For this to work we need to
+	 * prepare the child's stack a bit.
+	 */
+	andi.	r30,r5,CLONE_VFORK
+	beq	L(skip_stack_setup)
+
+	/* compensate for what DO_CALL_STACKROOM does */
+	subi	r4,r4,CLONE_STACKROOM
+	std	r2,FRAME_TOC_SAVE(r4)
+
+L(skip_stack_setup):
+
 	/* Save fn, args, stack across syscall.  */
 	mr	r30,r3			/* Function in r30.  */
 	mr	r29,r5			/* Flags in r29.  */
@@ -68,7 +91,7 @@ ENTRY (__clone)
 	cfi_endproc
 
 	/* Do the call.  */
-	DO_CALL(SYS_ify(clone))
+	DO_CALL_STACKROOM(SYS_ify(clone), CLONE_STACKROOM)
 
 	/* Check for child process.  */
 	cmpdi	cr1,r3,0
